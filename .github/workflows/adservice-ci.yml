name: Microservices Demo Pipeline

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

env:
  DOCKER_HUB_USERNAME: 'hayzedak'
  SERVICE_NAME: 'adservice'
  SERVICE_PATH: './src/adservice'

jobs:
  sonarqube-scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_AUTH_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=microservices-demo-adservice
            -Dsonar.sources=${{ env.SERVICE_PATH }}
            -Dsonar.java.binaries=${{ env.SERVICE_PATH }}/build/classes
            -Dsonar.sourceEncoding=UTF-8

  build-and-publish:
    name: Build and Publish Docker Image
    needs: sonarqube-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.SERVICE_PATH }}

      - name: Run Trivy Security Scan
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} --severity HIGH,CRITICAL

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest

      - name: Clean up Workspace
        if: always()
        run: |
          rm -rf ${{ env.SERVICE_PATH }}